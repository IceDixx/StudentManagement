<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="raisetech.Student.management.repository.StudentRepository">

  <!--受講生の全件検索を行います。-->
  <select id="search" resultType="raisetech.Student.management.data.Student">
    SELECT * FROM student WHERE is_deleted = false
  </select>
  <select id="findID" resultType="raisetech.Student.management.data.Student">
    SELECT * FROM student WHERE id = #{id}
  </select>
  <!--受講生の検索を行います。-->
  <select id="searchById" resultType="raisetech.Student.management.data.Student">
    SELECT * FROM student WHERE id = #{id}
  </select>
  <!--受講生のコース情報の全件検索を行います。-->
  <select id="searchStudentCourses" resultType="raisetech.Student.management.data.StudentCourse">
    SELECT * FROM student_courses WHERE course_id = #{courseId}
  </select>
  <!--受講生IDに紐づく受講コース情報を検索します。-->
  <select id="searchStudentCourseList" resultType="raisetech.Student.management.data.StudentCourse">
    SELECT * FROM student_courses WHERE student_id = #{studentId}
  </select>
  <!--fake delete-->
  <update id="vacantStudent" parameterType="int">
    UPDATE student SET is_deleted = true WHERE id = #{id}
  </update>
  <!--  受講生を更新します-->
  <update id="updateStudent" parameterType="raisetech.Student.management.data.Student">
    UPDATE student SET name=#{name}, age=#{age}, email=#{email}, nickname=#{nickname},
    address=#{address}, gender=#{gender}, remark=#{remark}, is_deleted=#{isDeleted} WHERE id =#{id}
  </update>
  <!--  受講コース名を更新します-->
  <update id="updateStudentCourse" parameterType="raisetech.Student.management.data.StudentCourse">
    UPDATE student_courses SET course_name = #{courseName} WHERE course_id=#{courseId}
  </update>

  <!--受講生を新規登録します IDに関しては自動採番を行う-->
  <insert id="registerStudent"
    parameterType="raisetech.Student.management.data.Student"
    useGeneratedKeys="true" keyProperty="id"
  >
    INSERT INTO student (name, nickname, email, address, age, gender, remark)
    VALUES (#{name}, #{nickname}, #{email}, #{address}, #{age}, #{gender},#{remark})

  </insert>
  <!--  受講生コース情報を新規登録します。IDに関しては自動採番を行う-->
  <insert id="registerStudentCourses"
    parameterType="raisetech.Student.management.data.StudentCourse"
    useGeneratedKeys="true" keyProperty="courseId"
  >
    INSERT INTO student_courses (student_id, course_name, start_date, end_date)
    VALUES (#{studentId}, #{courseName}, #{startDate}, #{endDate})

  </insert>
  <!-- コースステータス情報を新規登録します。IDは自動採番 -->
  <insert id="registerCourseStatus"
    parameterType="raisetech.Student.management.data.CourseStatus"
    useGeneratedKeys="true" keyProperty="id">
    INSERT INTO course_status (course_id, status)
    VALUES (#{courseId}, #{status})
  </insert>
  <select id="searchByCondition" parameterType="map"
    resultType="raisetech.Student.management.data.Student">
    SELECT * FROM student
    WHERE is_deleted = false
    AND (#{name} IS NULL OR name LIKE CONCAT('%', #{name}, '%'))
    AND (#{email} IS NULL OR email LIKE CONCAT('%', #{email}, '%'))
    AND (#{age} IS NULL OR age = #{age})
  </select>
  <select id="searchCourseStatuses"
    resultType="raisetech.Student.management.data.CourseStatus">
    SELECT course_id, status
    FROM course_status
  </select>
  <!--単独な受講コースステータスを受講生IDで取得し受講コースステータスを取ります-->
  <select id="searchCourseStatusesList"
    resultType="raisetech.Student.management.data.CourseStatus">
    SELECT course_id, status
    FROM course_status
  </select>
  <!--受講コースステータスを更新します-->
  <update id="updateCourseStatus" parameterType="raisetech.Student.management.data.CourseStatus">
    UPDATE course_Status SET status =#{status} WHERE course_id=#{courseId}
  </update>


</mapper>